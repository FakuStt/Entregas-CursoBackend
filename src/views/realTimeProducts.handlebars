<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-Time Products</title>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <h1>Lista de Productos en Tiempo Real</h1>
    <ul id="product-list"></ul>

    <button id="addProductButton">Agregar Producto</button>
    <h2>Carritos Disponibles</h2>
    <ul id="cart-list"></ul>

    <button id="crearCartButton">Crear Carrito</button>

    

    <script>
        const socket = io();

        // Renderizar productos
        function renderProducts(products) {
            const productList = document.getElementById('product-list');
            productList.innerHTML = '';
            products.forEach(product => {
                const li = document.createElement('li');
                li.innerHTML = `
                    ${product.title} - ${product.price} 
                    <button onclick="addProductToCart('${product._id}')">Agregar al Carrito</button>
                    <button onclick="modifyProduct('${product._id}')">Modificar</button>
                    <button onclick="deleteProduct('${product._id}')">Eliminar</button>
                `;
                productList.appendChild(li);
            });
        }

        // Renderizar carritos
        function renderCarts(carts) {
            const cartList = document.getElementById('cart-list');
            cartList.innerHTML = '';
            carts.forEach(cart => {
                const li = document.createElement('li');
                li.innerHTML = `
                    Carrito ID: ${cart._id}
                    <button onclick="emptyCart('${cart._id}')">Vaciar Carrito</button>
                    <button onclick="deleteCart('${cart._id}')">Eliminar Carrito</button>
                `;
                cartList.appendChild(li);
            });
        }

        // Solicitar productos
        function getProducts() {
            socket.emit('getProducts');
        }

        // Solicitar carritos
        function getCarts() {
            socket.emit('getCarts');
        }

        // Crear nuevo carrito
        document.getElementById('crearCartButton').addEventListener('click', () => {
            socket.emit('createCart');
        });

        // Vaciar carrito
        function emptyCart(cartID) {
            Swal.fire({
                title: '¿Estás seguro de que deseas vaciar este carrito?',
                text: "Esta acción eliminará todos los productos del carrito.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sí, vaciar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    socket.emit('emptyCart', cartID);
                }
            });
        }

        // Eliminar carrito
        function deleteCart(cartID) {
            Swal.fire({
                title: '¿Estás seguro de que deseas eliminar este carrito?',
                text: "Esta acción eliminará el carrito permanentemente.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    socket.emit('deleteCart', cartID);
                }
            });
        }

        // Agregar producto al carrito

        // Define la función addProductToCart fuera del manejador del evento
function addProductToCart(productID) {
    getCartOptions().then(options => {
        Swal.fire({
            title: 'Selecciona un carrito para agregar el producto:',
            input: 'select',
            inputOptions: options,
            inputPlaceholder: 'Selecciona un carrito',
            showCancelButton: true,
            confirmButtonText: 'Agregar',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                socket.emit('addProductToCart', { cartId: result.value, productId: productID }, (response) => {
                    if (response.success) {
                        Swal.fire('Producto Agregado', 'El producto fue agregado al carrito con éxito', 'success');
                    } else {
                        Swal.fire('Error', response.message || 'No se pudo agregar el producto al carrito', 'error');
                    }
                });
            }
        });
    }).catch(error => {
        Swal.fire('Error', 'No se pudieron cargar las opciones de carritos', 'error');
        console.error('Error al obtener las opciones de carritos:', error);
    });
}

// Manejador del evento click en el botón
document.getElementById('addProductButton').addEventListener('click', () => {
    // Asegúrate de definir productID en algún lugar o pásalo como un argumento adecuado
    const productID = productID; // Reemplaza esto con el ID real del producto que deseas agregar
    addProductToCart(productID);
});


        // Modificar producto
        function modifyProduct(productID) {
            Swal.fire({
                title: 'Modifica los datos del producto:',
                html: `
                    <input id="title" class="swal2-input" type="text" placeholder="Título">
                    <input id="description" class="swal2-input" type="text" placeholder="Descripción">
                    <input id="price" class="swal2-input" type="number" placeholder="Precio">
                    <input id="code" class="swal2-input" type="text" placeholder="Código">
                    <input id="stock" class="swal2-input" type="number" placeholder="Stock">
                    <select id="status" class="swal2-input">
                        <option value="true">Disponible</option>
                        <option value="false">No disponible</option>
                    </select>
                    <input id="category" class="swal2-input" type="text" placeholder="Categoría">
                    <input id="thumbnails" class="swal2-input" type="text" placeholder="Thumbnails">
                `,
                focusConfirm: false,
                preConfirm: () => {
                    const title = document.getElementById('title').value;
                    const description = document.getElementById('description').value;
                    const price = document.getElementById('price').value;
                    const code = document.getElementById('code').value;
                    const stock = document.getElementById('stock').value;
                    const status = document.getElementById('status').value === 'true';
                    const category = document.getElementById('category').value;
                    const thumbnails = document.getElementById('thumbnails').value;

                    if (!title || !description || !price || !code || !stock || !category || !thumbnails) {
                        Swal.showValidationMessage('Todos los campos son obligatorios.');
                        return false;
                    }

                    return {
                        id: productID,
                        title: title,
                        description: description,
                        price: parseFloat(price),
                        code: code,
                        stock: parseInt(stock, 10),
                        status: status,
                        category: category,
                        thumbnails: thumbnails
                    };
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const updatedProduct = result.value;
                    socket.emit('updateProduct', updatedProduct);
                    Swal.fire('Producto modificado', 'Los datos del producto han sido actualizados exitosamente', 'success');
                }
            });
        }

        //eliminar producto
        function deleteProduct(productID) {
            Swal.fire({
                title: '¿Estás seguro de que deseas eliminar este carrito?',
                text: "Esta acción eliminará el carrito permanentemente.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    socket.emit('deleteProduct', productID);
                }
            });
        }
        

        // Modificar cantidad de producto en carrito
        function modifyProductQuantity(cartID, productID) {
            Swal.fire({
                title: 'Modificar cantidad del producto en el carrito',
                html: `
                    <input id="quantity" class="swal2-input" type="number" placeholder="Cantidad">
                `,
                focusConfirm: false,
                preConfirm: () => {
                    const quantity = document.getElementById('quantity').value;

                    if (!quantity || quantity <= 0) {
                        Swal.showValidationMessage('La cantidad debe ser mayor que 0.');
                        return false;
                    }

                    return {
                        cartId: cartID,
                        productId: productID,
                        quantity: parseInt(quantity, 10)
                    };
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const data = result.value;
                    socket.emit('updateProductQuantity', data);
                    Swal.fire('Cantidad actualizada', 'La cantidad del producto en el carrito ha sido actualizada', 'success');
                }
            });
        }

        // Opciones de carrito para seleccionar en la alerta
        function getCartOptions() {
            return new Promise((resolve) => {
                socket.emit('getCarts', (carts) => {
                    const options = {};
                    carts.forEach(cart => {
                        options[cart._id] = `Carrito ID: ${cart._id}`;
                    });
                    resolve(options);
                });
            });
        }

        // Agregar nuevo producto
document.getElementById('addProductButton').addEventListener('click', () => {
    Swal.fire({
        title: 'Agregar un nuevo producto',
        html: `
            <input id="title" class="swal2-input" type="text" placeholder="Título">
            <input id="description" class="swal2-input" type="text" placeholder="Descripción">
            <input id="price" class="swal2-input" type="number" placeholder="Precio">
            <input id="code" class="swal2-input" type="text" placeholder="Código">
            <input id="stock" class="swal2-input" type="number" placeholder="Stock">
            <select id="status" class="swal2-input">
                <option value="true">Disponible</option>
                <option value="false">No disponible</option>
            </select>
            <input id="category" class="swal2-input" type="text" placeholder="Categoría">
            <input id="thumbnails" class="swal2-input" type="text" placeholder="Thumbnails">
        `,
        focusConfirm: false,
        preConfirm: () => {
            const title = document.getElementById('title').value.trim();
            const description = document.getElementById('description').value.trim();
            const price = document.getElementById('price').value.trim();
            const code = document.getElementById('code').value.trim();
            const stock = document.getElementById('stock').value.trim();
            const status = document.getElementById('status').value === 'true';
            const category = document.getElementById('category').value.trim();
            const thumbnails = document.getElementById('thumbnails').value.trim();

            if (!title || !description || !price || !code || !stock || !category || !thumbnails) {
                Swal.showValidationMessage('Todos los campos son obligatorios.');
                return false;
            }

            return {
                title,
                description,
                price: parseFloat(price),
                code,
                stock: parseInt(stock, 10),
                status,
                category,
                thumbnails
            };
        }
    }).then((result) => {
        if (result.isConfirmed) {
            const newProduct = result.value;
            socket.emit('addProduct', newProduct, (response) => {
                if (response.success) {
                    Swal.fire('Producto agregado', 'El nuevo producto ha sido agregado exitosamente', 'success');
                } else {
                    Swal.fire('Error', 'Hubo un problema al agregar el producto', 'error');
                }
            });
        }
    });
});



        // Actualizar vistas cuando se reciben datos nuevos
        socket.on('updateProducts', (products) => {
            renderProducts(products);
        });

        socket.on('updateCarts', (carts) => {
            renderCarts(carts);
        });

        // Escucha para cuando se crea un carrito
        socket.on('cartCreated', (cart) => {
            Swal.fire('Carrito creado', `El carrito con ID: ${cart._id} ha sido creado exitosamente.`, 'success');
            getCarts(); // Actualizar la lista de carritos
        });

        // Escucha para cuando se vacía un carrito
        socket.on('cartEmptied', (cartID) => {
            Swal.fire('Carrito vaciado', `El carrito con ID: ${cartID} ha sido vaciado exitosamente.`, 'success');
            getCarts(); // Actualizar la lista de carritos
        });

        // Escucha para cuando se elimina un carrito
        socket.on('cartDeleted', (cartID) => {
            Swal.fire('Carrito eliminado', `El carrito con ID: ${cartID} ha sido eliminado exitosamente.`, 'success');
            getCarts(); // Actualizar la lista de carritos
        });

        // Escucha para cuando se agrega un producto a un carrito
        socket.on('productAddedToCart', ({ cartId, productId }) => {
            Swal.fire('Producto agregado', `El producto con ID: ${productId} ha sido agregado al carrito con ID: ${cartId}.`, 'success');
            getCarts(); // Actualizar la lista de carritos
        });

        // Escucha para cuando se actualiza la cantidad de un producto en un carrito
        socket.on('productQuantityUpdated', ({ cartId, productId, quantity }) => {
            Swal.fire('Cantidad actualizada', `La cantidad del producto con ID: ${productId} en el carrito con ID: ${cartId} ha sido actualizada a ${quantity}.`, 'success');
            getCarts(); // Actualizar la lista de carritos
        });

        // Escucha para cuando se elimina un producto
        socket.on('productDeleted', (productID) => {
            Swal.fire('Producto eliminado', `El producto con ID: ${productID} ha sido eliminado exitosamente.`, 'success');
            getProducts(); // Actualizar la lista de productos
        });

        // Escucha para cuando se actualiza un producto
        socket.on('productUpdated', (product) => {
            Swal.fire('Producto actualizado', `El producto con ID: ${product._id} ha sido actualizado exitosamente.`, 'success');
            getProducts(); // Actualizar la lista de productos
        });

        // Inicializar vista
        getProducts();
        getCarts();

    </script>
</body>
</html>









